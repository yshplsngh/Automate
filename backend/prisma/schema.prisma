generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                 String             @id @default(uuid())
    email              String             @unique
    password           String?
    name               String?
    avatar_url         String?
    created_at         DateTime           @default(now())
    updated_at         DateTime           @updatedAt
    identity_providers IdentityProvider[]
    workflows          Workflow[]
}

model IdentityProvider {
    id            String    @id @default(uuid())
    user_id       String
    provider      String
    provider_id   String // Unique ID from provider (e.g., Google sub, GitHub id)
    email         String?
    access_token  String
    refresh_token String?
    scopes        String[] // Array of permissions 
    expires_at    DateTime?
    created_at    DateTime  @default(now())
    updated_at    DateTime  @updatedAt

    user User @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Workflow {
    id          String   @id @unique @default(cuid())
    name        String   @default("Untitled Workflow")
    description String?
    owner_id    String
    job_count   Int      @default(0)
    active      Boolean  @default(false)
    apps        Apps[]   @default([])
    created_at  DateTime @default(now())
    updated_at  DateTime @updatedAt
    owner       User     @relation(fields: [owner_id], references: [id])
    jobs        Job[]
}

model Job {
    id          String   @id @unique @default(cuid())
    name        String
    description String?
    workflow_id String
    app         Apps
    step_no     Int
    type        JobType
    data        Json
    created_at  DateTime @default(now())
    updated_at  DateTime @updatedAt
    workflow    Workflow @relation(fields: [workflow_id], references: [id])
}

enum Apps {
    http
    schedule
    webhook
}

enum JobType {
    action
    trigger
}
